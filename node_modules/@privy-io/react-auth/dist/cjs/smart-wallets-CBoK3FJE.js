"use strict";var e=require("react"),t=require("viem"),r=require("./useWallets-y1wsvg5v.js"),n=require("./internal-context-BFE-DjTn.js"),a=require("./getPublicClient-BjV7zj03.js"),i=require("./getEmbeddedConnectedWallet-DTU4T9TJ.js"),s=require("permissionless"),o=require("permissionless/accounts"),l=require("permissionless/clients/pimlico"),c=require("viem/account-abstraction"),d=require("@privy-io/js-sdk-core");let u={address:c.entryPoint06Address,version:"0.6"},p={address:c.entryPoint07Address,version:"0.7"},y=({owner:e,smartWalletType:t,publicClient:r})=>{switch(t){case d.SAFE:return o.toSafeSmartAccount({client:r,entryPoint:p,owners:[e],version:"1.4.1"});case d.KERNEL:return o.toEcdsaKernelSmartAccount({client:r,version:"0.3.1",entryPoint:p,owners:[e]});case d.BICONOMY:return o.toBiconomySmartAccount({client:r,owners:[e],entryPoint:u});case d.LIGHT_ACCOUNT:return o.toLightSmartAccount({client:r,entryPoint:u,owner:e,version:"1.1.0"});case d.COINBASE_SMART_WALLET:return async function({client:e,owner:t}){let[r]=await t.request({method:"eth_accounts"});if(!r)throw Error("Unable to request embedded owner for eth_accounts");return await c.toCoinbaseSmartAccount({client:e,owners:[{type:"local",source:"privy",address:r,sign:async({hash:e})=>await t.request({method:"secp256k1_sign",params:[e]})}]})}({client:r,owner:e});case d.THIRDWEB:return o.toThirdwebSmartAccount({client:r,entryPoint:p,owner:e});default:throw Error(`Invalid smart account type: ${t}.`)}},m=["rpc.zerodev.app","public.pimlico.io","api.pimlico.io"];const E=({calls:e,chain:t,maxPriorityFeePerGas:r,maxFeePerGas:n,nonce:a})=>e.map((e=>({to:e.to||void 0,data:e.data,value:e.value,chainId:t.id,nonce:a,maxFeePerGas:n,maxPriorityFeePerGas:r}))),g=async({chain:e,paymasterContext:r,embeddedWallet:i,user:o,smartWalletsConfig:c,rpcConfig:d,privyAppId:u})=>{if(!c?.enabled||!o||!i)return;let p=await i.getEthereumProvider(),E=c?.configuredNetworks.find((t=>t.chainId===`eip155:${e.id}`));if(!E)throw new n.PrivyClientError(`The chain ${e.name} (eip155:${e.id}) must be configured in the smart wallet configuration in your dashboard`);let g=o.smartWallet?.smartWalletType??c.smartWalletType,C=a.getJsonRpcEndpointFromChain(e,d,u),I=t.createPublicClient({chain:e,transport:t.http(C)}),f=r??E.paymasterContext,h=await(async({owner:e,smartWalletType:r,chain:n,publicClient:a,bundlerUrl:i,paymasterUrl:o,paymasterContext:c})=>{let d=await y({owner:e,smartWalletType:r,publicClient:a}),u=l.createPimlicoClient({transport:t.http(i),entryPoint:d.entryPoint}),p=o?l.createPimlicoClient({transport:t.http(o),entryPoint:d.entryPoint}):void 0;return s.createSmartAccountClient({account:d,chain:n,paymaster:p,paymasterContext:c,bundlerTransport:t.http(i),userOperation:{estimateFeesPerGas:async()=>{if(m.some((e=>i.includes(e))))return await u.getUserOperationGasPrice().then((e=>e.fast));{let e=await a.estimateFeesPerGas(),t=i.includes("api.developer.coinbase.com")?175n:150n;return{...e,maxFeePerGas:e.maxFeePerGas*t/100n,maxPriorityFeePerGas:e.maxPriorityFeePerGas*t/100n}}}}})})({owner:p,smartWalletType:g,chain:e,publicClient:I,paymasterContext:f,...E});if(!h)throw new n.PrivyClientError(`Failed to create smart wallet client for chain ${e.name} (eip155:${e.id})`);return h};exports.callsToTransactionRequests=E,exports.getSmartWalletClient=g,exports.useSmartWalletsUIWrapper=()=>{let{hideWalletUIs:e,openPrivyModal:t}=n.usePrivyInternal(),a=r.useAppConfig(),{setModalData:i}=r.usePrivyModal(),{user:s}=r.usePrivyContext();return{wrapSmartAccountClientWithUIs:n=>({...n,sendTransaction:async(o,l)=>{if(!a.embeddedWallets.showWalletUIs)return e.current=!0,await n.sendTransaction(o).finally((()=>e.current=!1));let c=[];"calls"in o&&void 0!==o.calls?c=[...o.calls]:"to"in o&&(c=[{to:o.to,value:o.value||BigInt(0),data:o.data||"0x"}]);let d=async()=>{if(!n.paymaster)return!1;let{paymasterAndData:e,paymasterData:t}=await n.prepareUserOperation({calls:c,maxFeePerGas:o.maxFeePerGas,maxPriorityFeePerGas:o.maxPriorityFeePerGas,nonce:o.nonce?BigInt(o.nonce):void 0});return Number(e??t??0)>0};return new Promise((async(a,u)=>{e.current=!0;let{entropyId:p,entropyIdVerifier:y}=r.getEntropyDetailsFromUser(s);i({connectWallet:{entropyId:p,entropyIdVerifier:y,onCompleteNavigateTo:r.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:E({calls:c,chain:n.chain,maxPriorityFeePerGas:o.maxPriorityFeePerGas,maxFeePerGas:o.maxFeePerGas,nonce:o.nonce?BigInt(o.nonce):void 0}),entropyId:p,entropyIdVerifier:y,transactingWallet:{address:n.account.address,walletIndex:null},getIsSponsored:d,signOnly:!1,onConfirm:()=>n.sendTransaction(o),onSuccess:e=>a(e.hash),onFailure:u,uiOptions:l?.uiOptions??{}}}),t(r.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1}))},signMessage:async(o,l)=>a.embeddedWallets.showWalletUIs?new Promise((async(a,c)=>{let{entropyId:d,entropyIdVerifier:u}=r.getEntropyDetailsFromUser(s);e.current=!0,i({connectWallet:{entropyId:d,entropyIdVerifier:u,onCompleteNavigateTo:r.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:"string"==typeof o.message?o.message:o.message.raw.toString(),confirmAndSign:()=>n.signMessage(o),onSuccess:e=>a(e),onFailure:c,uiOptions:l?.uiOptions??{}}}),t(r.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1})):(e.current=!0,await n.signMessage(o).finally((()=>e.current=!1))),signTypedData:async(o,l)=>a.embeddedWallets.showWalletUIs?new Promise((async(a,c)=>{e.current=!0;let{entropyId:d,entropyIdVerifier:u}=r.getEntropyDetailsFromUser(s);i({connectWallet:{entropyId:d,entropyIdVerifier:u,onCompleteNavigateTo:r.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:o,confirmAndSign:()=>n.signTypedData(o),onSuccess:e=>a(e),onFailure:c,uiOptions:l?.uiOptions??{}}}),t(r.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1})):(e.current=!0,await n.signTypedData(o).finally((()=>e.current=!1)))})}},exports.useSmartWalletsWrapper=({clientConfig:t,smartWalletsConfig:a})=>{let{hideWalletUIs:s,openPrivyModal:o,appId:l}=n.usePrivyInternal(),c=r.useAppConfig(),{setModalData:d}=r.usePrivyModal(),{user:u}=r.usePrivyContext(),{chains:p}=r.useAppConfig(),{chainId:y,clients:m,setChainId:C,chainIdState:I}=(()=>{let t=e.useRef(),[r,n]=e.useState();return{clients:e.useRef({}),setChainId:e=>{t.current=e,n(e)},chainId:t,chainIdState:r}})(),f=p.find((e=>e.id===I)),{wallets:h}=r.useWallets(),P=e.useCallback((async()=>y.current),[y]),S=e.useCallback((async({id:e})=>{if(!m.current[e]){let r=i.getEmbeddedConnectedWallet(h),n=await g({chain:p.find((t=>t.id===e)),embeddedWallet:r,user:u,paymasterContext:t?.paymasterContext,smartWalletsConfig:a,rpcConfig:c.rpcConfig,privyAppId:l});n&&(m.current[e]=n)}C(e)}),[p,t,h,u,a]);return{wrapSmartAccountClient:e=>{m.current[e.chain.id]=e,I||C(e.chain.id);return{...e,sendTransaction:async(e,t)=>{let a=m.current[y.current];if(!a)throw new n.PrivyClientError(`Smart wallet client for chain (eip155:${y.current}) not found`);if(delete e.account,!c.embeddedWallets.showWalletUIs)return s.current=!0,await a.sendTransaction(e).finally((()=>s.current=!1));let i=[];"calls"in e&&void 0!==e.calls?i=[...e.calls]:"to"in e&&(i=[{to:e.to,value:e.value||BigInt(0),data:e.data||"0x"}]);let l=async()=>{if(!a.paymaster)return!1;let{paymasterAndData:t,paymasterData:r}=await a.prepareUserOperation({calls:i,maxFeePerGas:e.maxFeePerGas,maxPriorityFeePerGas:e.maxPriorityFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0});return Number(t??r??0)>0};return new Promise((async(n,c)=>{s.current=!0;let{entropyId:p,entropyIdVerifier:y}=r.getEntropyDetailsFromUser(u);d({connectWallet:{entropyId:p,entropyIdVerifier:y,onCompleteNavigateTo:r.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:E({calls:i,chain:a.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:p,entropyIdVerifier:y,transactingWallet:{address:a.account.address,walletIndex:null},getIsSponsored:l,signOnly:!1,onConfirm:()=>a.sendTransaction(e),onSuccess:e=>n(e.hash),onFailure:c,uiOptions:t?.uiOptions??{}}}),o(r.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{s.current=!1}))},signMessage:async(e,t)=>{let a=m.current[y.current];if(!a)throw new n.PrivyClientError(`Smart wallet client for chain (eip155:${y.current}) not found`);return c.embeddedWallets.showWalletUIs?new Promise((async(n,i)=>{let{entropyId:l,entropyIdVerifier:c}=r.getEntropyDetailsFromUser(u);s.current=!0,d({connectWallet:{entropyId:l,entropyIdVerifier:c,onCompleteNavigateTo:r.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:"string"==typeof e.message?e.message:e.message.raw.toString(),confirmAndSign:()=>a.signMessage(e),onSuccess:e=>n(e),onFailure:i,uiOptions:t?.uiOptions??{}}}),o(r.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{s.current=!1})):(s.current=!0,await a.signMessage(e).finally((()=>s.current=!1)))},signTypedData:async(e,t)=>{let a=m.current[y.current];if(!a)throw new n.PrivyClientError(`Smart wallet client for chain (eip155:${y.current}) not found`);return delete e.account,c.embeddedWallets.showWalletUIs?new Promise((async(n,i)=>{s.current=!0;let{entropyId:l,entropyIdVerifier:c}=r.getEntropyDetailsFromUser(u);d({connectWallet:{entropyId:l,entropyIdVerifier:c,onCompleteNavigateTo:r.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>a.signTypedData(e),onSuccess:e=>n(e),onFailure:i,uiOptions:t?.uiOptions??{}}}),o(r.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{s.current=!1})):(s.current=!0,await a.signTypedData(e).finally((()=>s.current=!1)))},getChainId:P,chain:f,switchChain:S}}}};
